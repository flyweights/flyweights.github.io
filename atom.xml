<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flyweights.github.io</id>
    <title>白罴</title>
    <updated>2020-06-07T11:28:06.861Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flyweights.github.io"/>
    <link rel="self" href="https://flyweights.github.io/atom.xml"/>
    <subtitle>闲坐竹林里，淡泊寻常心。</subtitle>
    <logo>https://flyweights.github.io/images/avatar.png</logo>
    <icon>https://flyweights.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 白罴</rights>
    <entry>
        <title type="html"><![CDATA[swift 的基础知识]]></title>
        <id>https://flyweights.github.io/post/swift-de-ji-chu-zhi-shi/</id>
        <link href="https://flyweights.github.io/post/swift-de-ji-chu-zhi-shi/">
        </link>
        <updated>2020-06-01T11:27:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-from-objc-to-swift">1. from objc to swift</h2>
<pre><code class="language-objc">const int count = 10; 
double price = 23.55;

NSString *firstMessage = @&quot;Objc is awesome. &quot;;
NSString *secondMessage = @&quot;What do you think?&quot;;
NSString *message = [NSString stringWithFormat:@&quot;%@%@&quot;, firstMessage, secondMessage];

NSLog(@&quot;%@&quot;, message);

</code></pre>
<pre><code class="language-swift">let count = 10
var price = 23.55

let firstMessage = &quot;Swift is awesome. &quot;
let secondMessage = &quot;What do you think?&quot;
var message = firstMessage + secondMessage

print(message)

</code></pre>
<h2 id="2-常量-和-变量">2. 常量 和 变量</h2>
<pre><code class="language-swift">let constant = 10
var y = 10
var x = y + constant

</code></pre>
<h2 id="3-类型推论">3. 类型推论</h2>
<pre><code class="language-swift">// 按住 option 鍵 + 鼠标点击任一变量 = 得出该变量的类型

let constant:Int = 10
var y:Int = 10
var x:Int = y + constant

</code></pre>
<h2 id="4-字符串-string">4. 字符串 String</h2>
<pre><code class="language-swift">var message:String = &quot;Talk is cheap, show me the code&quot;

// 字符串追加
var greeting = &quot;Hello&quot;
var name = &quot;xiaoming&quot;
var message = greeting + name

// 大写和小写转换
message.uppercased()
message.lowercased()

// 字符串的字符个数
message.count

// 类型转换
var totalPrice:Int = 100
var totalPriceMessage = &quot;The price of the book is $&quot; + String(totalPrice)

</code></pre>
<h2 id="5流程控制">5.流程控制</h2>
<pre><code class="language-swift">var time = 6

if time == 6 {
    print(&quot;自己煮早餐&quot;)
} else {
    print(&quot;到外面买早餐&quot;)
}

// 或者

switch time {
case 6:
    print(&quot;自己煮早餐&quot;)
default:
    print(&quot;到外面买早餐&quot;)
}


var money = 9999

if money &gt;= 100000 {
    print(&quot;出国游&quot;)
} else if money &gt;= 10000 &amp;&amp; money &lt; 100000 {
    print(&quot;国内游&quot;)
} else if money &gt;= 1000 &amp;&amp; money &lt; 10000 {
    print(&quot;省内游&quot;)
} else {
    print(&quot;市内游&quot;)
}

// 或者

switch money {
case 100000...:
    print(&quot;出国游&quot;)
case 10000...99999:
    print(&quot;国内游&quot;)
case 1000...9999:
    print(&quot;省内游&quot;)
default:
    print(&quot;市内游&quot;)
}


</code></pre>
<h2 id="6-数组-array">6. 数组 Array</h2>
<pre><code class="language-swift">var book1 = &quot;水浒传&quot;
var book2 = &quot;三国演义&quot;
var book3 = &quot;西游记&quot;

var bookArray = [book1, book2, book3]

// 获取第一本书
print(bookArray[0])

// 添加一本书
bookArray.append(&quot;红楼梦&quot;)

// 一共有多少本书
bookArray.count


// 遍历所有书籍
for index in 0...3{
    print(bookArray[index])
}

for index in 0...bookArray.count-1{
    print(bookArray[index])
}

for book in bookArray {
    print(book)
}
</code></pre>
<h2 id="7-字典-dictionary">7. 字典 Dictionary</h2>
<pre><code class="language-swift">var animalDict = [
    &quot;cat&quot;: &quot;🐱&quot;,
    &quot;dog&quot;: &quot;🐶&quot;,
    &quot;pig&quot;: &quot;🐷&quot;,
    &quot;cow&quot;: &quot;🐮&quot;
]

// 这里有出现一个警告⚠️ Expression implicitly coerced from 'String?' to 'Any'
print(animalDict[&quot;dog&quot;])

for (key, value) in animalDict {
    print(&quot;Title: \(key)&quot;)
    print(&quot;Emoji: \(value)&quot;)
    print(&quot;---&quot;)
}

</code></pre>
<h2 id="8-可选类型-optionals">8. 可选类型 Optionals</h2>
<pre><code class="language-swift">// 声明一个为 nil 的 可选类型 字符串
var hobby: String?

hobby = &quot;running&quot;

// ❌ Value of optional type 'String?' must be unwrapped to a value of type 'String'
// var message = &quot;Your hobby is &quot; + hobby

// 所以取值的时，应该解开可选类型

// 1. 暴力解开，使用感叹号 ！
if hobby != nil {
    var message = &quot;Your hobby is &quot; + hobby!
    print(message)

}

// 2. 可选绑定，就是将一个 有值的可选类型 赋给一个 临时的变量
if let hobbyValue = hobby {
    var message = &quot;Your hobby is &quot; + hobbyValue
    print(message)
}

/*
 总结：
    使用了可选类型，就相当于是快递的“货件打包”
    可选类型产生了保护的作用
    收到快递之后，只有拆开快递，才能取出货件，这就是取值
 */

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails + Nginx in Mac]]></title>
        <id>https://flyweights.github.io/post/rails-nginx-in-mac/</id>
        <link href="https://flyweights.github.io/post/rails-nginx-in-mac/">
        </link>
        <updated>2020-02-29T13:06:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="step1-rails-项目准备">Step1. Rails 项目准备</h2>
<pre><code class="language-bash">$ rails new deploy_demo
$ rails g controller welcome index
$ rails s
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/04/15/5FVitUgMuqseYnQ.png" alt="rails_s.png" loading="lazy"></figure>
<pre><code class="language-bash">$ cd deploy_demo
$ git init
$ git add .
$ git commit -m &quot;Init commit&quot;
</code></pre>
<h2 id="step2-nginx-安装和启动">Step2. Nginx 安装和启动</h2>
<pre><code class="language-bash"># 安装
$ brew install nginx 

# 开启
$ brew services start nginx

# 关闭
$ brew services stop nginx

# 重启
$ brew services restart nginx

</code></pre>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2020/04/15/Mf42UpOgJTZEPyk.png" alt="iShot2020-04-1513.55.44.png" loading="lazy"></figure>
<h2 id="step3-nginx-配置">Step3. Nginx 配置</h2>
<pre><code class="language-bash">$ touch /usr/local/etc/nginx/servers/rails_nginx.conf
</code></pre>
<pre><code>upstream app {
    # 改成实际 puma.sock 的文件路径
    server unix://Users/liangyk/rails_project/deploy_demo/tmp/sockets/puma.sock;
}

server {
    listen 1234;
    # 改成实际服务器域名
    server_name localhost;

    # 改成实际 APP 路径
    root /Users/liangyk/rails_project/deploy_demo/public;

    try_files $uri/index.html $uri @app;

    location @app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://app;
    }

    error_page 500 502 503 504 /500.html;
    keepalive_timeout 10;
}
</code></pre>
<h2 id="step4-puma-配置">Step4. Puma 配置</h2>
<pre><code class="language-ruby">config/puma.rb

# port        ENV.fetch(&quot;PORT&quot;) { 3000 }
+ bind &quot;unix://tmp/sockets/puma.sock&quot;
+ daemonize true
</code></pre>
<h2 id="step5-脚本控制">Step5. 脚本控制</h2>
<pre><code class="language-bash">$ touch pumactrl.sh
</code></pre>
<pre><code class="language-bash">#!/bin/bash

case &quot;$1&quot; in
    &quot;&quot;)
        echo -n &quot;please provide a parameter (start, stop, reload).&quot;
        ;;
    start)
        echo -n &quot;starting db:migrate...&quot;
        bin/rails db:migrate
        echo -n &quot;starting assets:precompile...&quot;
        bin/rails assets:precompile
        echo -n &quot;starting puma...&quot;
        puma -e production
        ;;
    stop)
        echo &quot;stoping puma...&quot;
        kill `cat &quot;tmp/pids/server.pid&quot;`
        ;;
esac
</code></pre>
<pre><code class="language-bash">$  bash ./pumactrl.sh start
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2020/04/15/soBl13AqgwjDLOH.png" alt="iShot2020-04-1515.29.23.png" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[够用版的 jbuilder]]></title>
        <id>https://flyweights.github.io/post/gou-yong-ban-de-jbuilder/</id>
        <link href="https://flyweights.github.io/post/gou-yong-ban-de-jbuilder/">
        </link>
        <updated>2020-02-28T15:14:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="step1-_itemjsonjbuilder">Step1. _item.json.jbuilder</h2>
<pre><code class="language-bash">$ touch app/views/api/v1/articles/_item.json.jbuilder
</code></pre>
<pre><code class="language-ruby"># app/views/api/v1/articles/_item.json.jbuilder

json.title article.title
json.content article.content
</code></pre>
<h2 id="step2-showjsonjbuilder">Step2. show.json.jbuilder</h2>
<pre><code class="language-bash">$ touch app/views/api/v1/articles/show.json.jbuilder
</code></pre>
<pre><code class="language-ruby"># app/views/api/v1/articles/show.json.jbuilder

json.article do
  json.partial! 'item', article: @article
end

</code></pre>
<p>⬇️</p>
<pre><code class="language-json">{
  &quot;article&quot;: {
    &quot;title&quot;: &quot;明明&quot;,
    &quot;content&quot;: &quot;sun and moon&quot;
  }
}
</code></pre>
<h2 id="step3-indexjsonjbuilder">Step3. index.json.jbuilder</h2>
<pre><code class="language-bash">$ app/views/api/v1/articles/index.json.jbuilder
</code></pre>
<pre><code class="language-ruby"># app/views/api/v1/articles/index.json.jbuilder

json.list do
  json.array! @articles, partial: 'item', as: :article
end

</code></pre>
<p>⬇️</p>
<pre><code class="language-ruby">{
  &quot;articles&quot;: [
    {
      &quot;title&quot;: &quot;明明&quot;,
      &quot;content&quot;: &quot;sun and moon&quot;
    },
    {
      &quot;title&quot;: &quot;小红&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    }
  ]
}
</code></pre>
<h2 id="step4-gem-will_paginate">Step4. gem 'will_paginate'</h2>
<pre><code class="language-ruby">+ gem 'will_paginate'
</code></pre>
<pre><code class="language-bash">$ bundle
</code></pre>
<pre><code class="language-ruby"># app/controllers/api/v1/articles_controller.rb

  def index
    #@articles = Article.all
    @articles = Article.paginate(page: params[:page])
  end
</code></pre>
<pre><code class="language-ruby"># app/views/api/v1/articles/index.json.jbuilder

piece = @articles
json.meta do
  json.current_page piece.current_page
  json.total_pages piece.total_pages
  json.per_page piece.per_page
  json.total_entries piece.total_entries
end

json.articles do
  json.array! @articles, partial: 'item', as: :article
end

</code></pre>
<p>⬇️</p>
<pre><code>http://localhost:3000/api/v1/articles?auth_token=_DnWEG22XTfW4U8s5M5x&amp;page=2
</code></pre>
<p>⬇️</p>
<pre><code class="language-json">{
  &quot;meta&quot;: {
    &quot;current_page&quot;: 2,
    &quot;total_pages&quot;: 3,
    &quot;per_page&quot;: 5,
    &quot;total_entries&quot;: 11
  },
  &quot;articles&quot;: [
    {
      &quot;title&quot;: &quot;小红4&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    },
    {
      &quot;title&quot;: &quot;小红5&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    },
    {
      &quot;title&quot;: &quot;小红6&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    },
    {
      &quot;title&quot;: &quot;小红7&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    },
    {
      &quot;title&quot;: &quot;小红8&quot;,
      &quot;content&quot;: &quot;我爱你小红&quot;
    }
  ]
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 5 PackageManager]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-5/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-5/">
        </link>
        <updated>2020-02-06T09:38:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="cocoapods-rubygems">cocoapods &amp; rubygems</h3>
<blockquote>
<p>https://cocoapods.org/</p>
</blockquote>
<blockquote>
<p>https://rubygems.org/</p>
</blockquote>
<h3 id="对应文件">对应文件</h3>
<p><code>iOS</code>-<code>Podfile</code></p>
<p><code>rails</code>-<code>Gemfile</code></p>
<h3 id="版本号">版本号</h3>
<pre><code>pod 'AFNetworking', '~&gt; 3.1.0' # 差不多
</code></pre>
<pre><code>gem 'rails', '&gt;= 5.0.0', '&lt; 5.1' # 大于等于，小于
</code></pre>
<h3 id="安装库">安装库</h3>
<pre><code>$ pod install # cocoapods的命令
</code></pre>
<pre><code>$ bundle install # rubygems的命令
</code></pre>
<h3 id="常用库">常用库</h3>
<h4 id="ios">iOS</h4>
<p><a href="https://github.com/vsouza/awesome-ios">awesome-ios</a></p>
<h4 id="rails">Rails</h4>
<p><a href="https://github.com/hothero/awesome-rails-gem">awesome-rails-gem</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 4 Class&Module]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-4/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-4/">
        </link>
        <updated>2020-02-05T09:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类">类</h2>
<h3 id="定义类">定义类</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;

@interface Cat : NSObject
-(void)eat:(NSString*)food;
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;

@implementation Cat
-(void)eat:(NSString*)food{
	NSLog(@&quot;%@, 好好吃！&quot;,food);
}
@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		Cat * cat = [Cat new];
	    [cat eat:@&quot;小鱼&quot;];
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
	def eat(food)
		puts &quot;#{food}，好好吃!&quot;
	end
end

kitty = Cat.new
kitty.eat &quot;小魚&quot;  #=&gt; 小魚，好好吃!
</code></pre>
<h3 id="初始化方法">初始化方法</h3>
<p>objc:</p>
<pre><code class="language-objc">...
- (instancetype)init
{
    if(self = [super init])//说明父类的init方法执行成功
    {
     // 初始化子类自己的属性;
    }
    return self;
}
...

</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  def initialize(name, gender)
    @name = name
    @gender = gender
  end

  def say_hello
    puts &quot;hello, my name is #{@name}&quot;
  end
end

kitty = Cat.new(&quot;kitty&quot;, &quot;female&quot;)
kitty.say_hello    # =&gt; hello, my name is kitty
</code></pre>
<h3 id="实例变量和属性">实例变量和属性</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;

@interface Cat : NSObject
@property(nonatomic, strong)NSString *name; // 属性
-(id)initWithName:(NSString*)name andGender:(NSString*)gender;
-(void)sayHello;
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;
@interface Cat ()
{
	NSString* _name; // 实例变量
	NSString* _gender;
}
@end
@implementation Cat
-(id)initWithName:(NSString*)name andGender:(NSString*)gender{
	if(self = [super init])
	{
		_name = name;
		_gender = gender;
	}
	return self;
}

-(void)sayHello{
	NSLog(@&quot;hello, my name is %@&quot;, _name);
}
@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		Cat * cat = [[Cat alloc]initWithName:@&quot;kitty&quot; andGender:@&quot;female&quot;];
	    [cat sayHello];  // =&gt; hello, my name is kitty
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  attr_accessor :name #属性 

  def initialize(name, gender)
    @name = name # 实例变量
    @gender = gender
  end
    
  def say_hello
    puts &quot;hello, my name is #{@name}&quot; # =&gt; hello, my name is kitty
  end
end
</code></pre>
<h3 id="类方法和对象方法">类方法和对象方法</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;
@interface Cat ()
@end
@implementation Cat
+(void)info{
//	类方法
}
-(void)sayHello{
// 对象方法
}
@end
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  # 类方法
  def self.info 
    # ...
  end

 # 对象方法
  def say_hello
    # ...
  end
end
</code></pre>
<h2 id="模块">模块</h2>
<p>objc:</p>
<pre><code class="language-objc">// NSObject+Flyable.h

#import &lt;Foundation/Foundation.h&gt;

@interface NSObject (Flyable)
-(void)fly;
@end
</code></pre>
<pre><code class="language-objc">// NSObject+Flyable.m

#import &quot;NSObject+Flyable.h&quot;

@implementation NSObject (Flyable)
-(void)fly{
	NSLog(@&quot;I can fly!&quot;);
}
@end
</code></pre>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;
#import &quot;NSObject+Flyable.h&quot;

@interface Cat : NSObject
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;

@implementation Cat
@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
	    Cat * cat = [Cat new];
	    [cat fly];  // =&gt; I can fly!
	}
}

</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">module Flyable
  def fly
    puts &quot;I can fly!&quot;
  end
end

class Cat
  include Flyable
end

kitty = Cat.new
kitty.fly        # =&gt; I can fly!
</code></pre>
<hr>
<p>参考资料：<br>
<a href="https://railsbook.tw/">railsbook</a></p>
<hr>
<ul>
<li>持续更新。</li>
<li>若有更好的资料，感谢交流。</li>
<li>若有错误的内容，感谢斧正。</li>
</ul>
]]></content>
    </entry>
</feed>