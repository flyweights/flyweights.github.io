<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flyweights.github.io</id>
    <title>白罴</title>
    <updated>2020-06-03T09:43:29.386Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flyweights.github.io"/>
    <link rel="self" href="https://flyweights.github.io/atom.xml"/>
    <subtitle>闲坐竹林里，淡泊寻常心。</subtitle>
    <logo>https://flyweights.github.io/images/avatar.png</logo>
    <icon>https://flyweights.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 白罴</rights>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 5]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-5/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-5/">
        </link>
        <updated>2020-02-06T09:38:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="cocoapods-rubygems">cocoapods &amp; rubygems</h3>
<blockquote>
<p>https://cocoapods.org/</p>
</blockquote>
<blockquote>
<p>https://rubygems.org/</p>
</blockquote>
<h3 id="对应文件">对应文件</h3>
<p><code>iOS</code>-<code>Podfile</code></p>
<p><code>rails</code>-<code>Gemfile</code></p>
<h3 id="版本号">版本号</h3>
<pre><code>pod 'AFNetworking', '~&gt; 3.1.0' # 差不多
</code></pre>
<pre><code>gem 'rails', '&gt;= 5.0.0', '&lt; 5.1' # 大于等于，小于
</code></pre>
<h3 id="安装库">安装库</h3>
<pre><code>$ pod install # cocoapods的命令
</code></pre>
<pre><code>$ bundle install # rubygems的命令
</code></pre>
<h3 id="常用库">常用库</h3>
<h4 id="ios">iOS</h4>
<p><a href="https://github.com/vsouza/awesome-ios">awesome-ios</a></p>
<h4 id="rails">Rails</h4>
<p><a href="https://github.com/hothero/awesome-rails-gem">awesome-rails-gem</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 4]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-4/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-4/">
        </link>
        <updated>2020-02-05T09:36:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类">类</h2>
<h3 id="定义类">定义类</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;

@interface Cat : NSObject
-(void)eat:(NSString*)food;
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;

@implementation Cat
-(void)eat:(NSString*)food{
	NSLog(@&quot;%@, 好好吃！&quot;,food);
}
@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		Cat * cat = [Cat new];
	    [cat eat:@&quot;小鱼&quot;];
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
	def eat(food)
		puts &quot;#{food}，好好吃!&quot;
	end
end

kitty = Cat.new
kitty.eat &quot;小魚&quot;  #=&gt; 小魚，好好吃!
</code></pre>
<h3 id="初始化方法">初始化方法</h3>
<p>objc:</p>
<pre><code class="language-objc">...
- (instancetype)init
{
    if(self = [super init])//说明父类的init方法执行成功
    {
     // 初始化子类自己的属性;
    }
    return self;
}
...

</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  def initialize(name, gender)
    @name = name
    @gender = gender
  end

  def say_hello
    puts &quot;hello, my name is #{@name}&quot;
  end
end

kitty = Cat.new(&quot;kitty&quot;, &quot;female&quot;)
kitty.say_hello    # =&gt; hello, my name is kitty
</code></pre>
<h3 id="实例变量和属性">实例变量和属性</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;

@interface Cat : NSObject
@property(nonatomic, strong)NSString *name; // 属性
-(id)initWithName:(NSString*)name andGender:(NSString*)gender;
-(void)sayHello;
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;
@interface Cat ()
{
	NSString* _name; // 实例变量
	NSString* _gender;
}
@end
@implementation Cat
-(id)initWithName:(NSString*)name andGender:(NSString*)gender{
	if(self = [super init])
	{
		_name = name;
		_gender = gender;
	}
	return self;
}

-(void)sayHello{
	NSLog(@&quot;hello, my name is %@&quot;, _name);
}
@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		Cat * cat = [[Cat alloc]initWithName:@&quot;kitty&quot; andGender:@&quot;female&quot;];
	    [cat sayHello];  // =&gt; hello, my name is kitty
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  attr_accessor :name #属性 

  def initialize(name, gender)
    @name = name # 实例变量
    @gender = gender
  end
    
  def say_hello
    puts &quot;hello, my name is #{@name}&quot; # =&gt; hello, my name is kitty
  end
end
</code></pre>
<h3 id="类方法和对象方法">类方法和对象方法</h3>
<p>objc:</p>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;
@interface Cat ()
@end
@implementation Cat
+(void)info{
//	类方法
}
-(void)sayHello{
// 对象方法
}
@end
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">class Cat
  # 类方法
  def self.info 
    # ...
  end

 # 对象方法
  def say_hello
    # ...
  end
end
</code></pre>
<h2 id="模块">模块</h2>
<p>objc:</p>
<pre><code class="language-objc">// NSObject+Flyable.h

#import &lt;Foundation/Foundation.h&gt;

@interface NSObject (Flyable)
-(void)fly;
@end
</code></pre>
<pre><code class="language-objc">// NSObject+Flyable.m

#import &quot;NSObject+Flyable.h&quot;

@implementation NSObject (Flyable)
-(void)fly{
	NSLog(@&quot;I can fly!&quot;);
}
@end
</code></pre>
<pre><code class="language-objc">// Cat.h

#import &lt;Foundation/Foundation.h&gt;
#import &quot;NSObject+Flyable.h&quot;

@interface Cat : NSObject
@end
</code></pre>
<pre><code class="language-objc">// Cat.m

#import &quot;Cat.h&quot;

@implementation Cat
@end
</code></pre>
<pre><code>// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Cat.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
	    Cat * cat = [Cat new];
	    [cat fly];  // =&gt; I can fly!
	}
}

</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">module Flyable
  def fly
    puts &quot;I can fly!&quot;
  end
end

class Cat
  include Flyable
end

kitty = Cat.new
kitty.fly        # =&gt; I can fly!
</code></pre>
<hr>
<p>参考资料：<br>
<a href="https://railsbook.tw/">railsbook</a></p>
<hr>
<ul>
<li>持续更新。</li>
<li>若有更好的资料，感谢交流。</li>
<li>若有错误的内容，感谢斧正。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 3]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-3/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-3/">
        </link>
        <updated>2020-02-04T09:35:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="方法">方法</h2>
<h3 id="定义方法">定义方法</h3>
<p>objc:</p>
<pre><code class="language-objc">// Demo.h

#import &lt;Foundation/Foundation.h&gt;

@interface Demo : NSObject
-(void)sayHelloTo:(NSString*)name;
@end
</code></pre>
<pre><code class="language-objc">// Demo.m

#import &quot;Demo.h&quot;

@implementation Demo

-(void)sayHelloTo:(NSString*)name{
	NSLog(@&quot;hello, %@&quot;, name);
}

@end
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def say_hello_to(name)
  puts &quot;hello, #{name}&quot;
end
</code></pre>
<h3 id="调用方法">调用方法</h3>
<p>objc:</p>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Demo.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		[[Demo new] sayHelloTo:@&quot;帅哥&quot;];
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">say_hello_to(&quot;帅哥&quot;) 
</code></pre>
<h3 id="参数的默认值">参数的默认值</h3>
<p>objc:</p>
<pre><code class="language-objc">// Demo.h

#import &lt;Foundation/Foundation.h&gt;

@interface Demo : NSObject
-(void)sayHelloTo:(NSString*)name;
@end
</code></pre>
<pre><code class="language-objc">// Demo.m

#import &quot;Demo.h&quot;

@implementation Demo

-(void)sayHelloTo:(NSString*)name{
	if (!name) {
		name = @&quot;美女&quot;;
	}
	NSLog(@&quot;hello, %@&quot;, name);
}

@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Demo.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		[[Demo new] sayHelloTo:nil];
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def say_hello_to(name=&quot;美女&quot;)
	puts &quot;hello, #{name}&quot;
end
</code></pre>
<h3 id="方法的返回值">方法的返回值</h3>
<p>objc:</p>
<pre><code class="language-objc">// Demo.h

#import &lt;Foundation/Foundation.h&gt;

@interface Demo : NSObject

-(NSString*)sayHelloTo:(NSString*)name;

@end
</code></pre>
<pre><code class="language-objc">// Demo.m

#import &quot;Demo.h&quot;

@implementation Demo

-(NSString*)sayHelloTo:(NSString*)name{
	return name;
}

@end
</code></pre>
<pre><code class="language-objc">// main.m

#import &lt;Foundation/Foundation.h&gt;
#import &quot;Demo.h&quot;
int main(int argc, char *argv[]) {
	@autoreleasepool {
		NSLog(@&quot;%@&quot;, [[Demo new] sayHelloTo:@&quot;美女&quot;]);
	}
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def say_hello_to(name=&quot;美女&quot;)
	return &quot;hello, #{name}&quot;
end

p say_hello_to
</code></pre>
<h2 id="代码块">代码块</h2>
<h3 id="声明和调用块">声明和调用块</h3>
<p>objc:</p>
<pre><code class="language-objc">dispatch_block_t sayHello;

sayHello = ^(){
	NSLog(@&quot;这里是 Block&quot;);	
};

NSLog(@&quot;开始&quot;);	
sayHello();
NSLog(@&quot;结束&quot;);	
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def say_hello &amp;block
	puts &quot;开始&quot;
	block.call          # 把控制权暂时让给 Block
	puts &quot;结束&quot;
end

say_hello {
	puts &quot;这里是 Block&quot;
}

# 或者

def say_hello
	puts &quot;开始&quot;
	yield          # 把控制权暂时让给 Block
	puts &quot;结束&quot;
end

say_hello {
	puts &quot;这里是 Block&quot;
}
</code></pre>
<h3 id="传参数给块">传参数给块</h3>
<p>objc:</p>
<pre><code class="language-objc">typedef void (^SayHello)(NSInteger);
SayHello sayHello;
	
sayHello = ^(NSInteger x){
	NSLog(@&quot;这里是 Block，我收到了%ld&quot;, x);
};
	
NSLog(@&quot;开始&quot;);
sayHello(123);
NSLog(@&quot;结束&quot;);
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def say_hello
	puts &quot;开始&quot;
	yield 123        # 把控制权暂时让给 Block
	puts &quot;结束&quot;
end

say_hello { |x|
	puts &quot;这里是 Block，我收到了#{x}&quot;
}
</code></pre>
<h3 id="块的回调">块的回调</h3>
<p>objc:</p>
<pre><code class="language-objc">// 逻辑部分
typedef BOOL (^LogicBlock)(NSNumber *);
LogicBlock logic = ^BOOL(NSNumber * num){
	if (num.integerValue % 2==0) {
		return YES;
	}else {
		return NO;
	}
};

// Block
typedef NSArray* (^PickBlock)(NSArray*, LogicBlock);
PickBlock pick = ^(NSArray* list, LogicBlock logic){
	NSMutableArray * result = @[].mutableCopy;
	
	[list enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
		NSNumber * num = obj;
		if (logic(num)) {
			[result addObject:num];
		}
	}];
	return [result copy];
};

// 得到结果
NSArray * dataList = @[@(1), @(2), @(3), @(4), @(5), @(6), @(7), @(8), @(9),@(10)];
NSLog(@&quot;%@&quot;, pick(dataList, logic));// =&gt; (2, 4, 6, 8, 10)

</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">def pick(list)
	result = []
	list.each do |i|
		result &lt;&lt; i if yield(i)     # 如果 yield 的返回值是 true 的話...
	end
	return result
end

p pick([*1..10]) {
    |x| x % 2 == 0 # 逻辑部分
  }
  # =&gt; [2, 4, 6, 8, 10]
</code></pre>
<ul>
<li>代码块的本质，就是将一块代码抽离出来</li>
<li><code>ruby</code>的<code>block</code>是代码的直接替换代码，简单而又直观</li>
<li><code>objC</code>的<code>block</code>是代码的间接来回指向，强调一来一回</li>
</ul>
<hr>
<p>参考资料：<br>
<a href="https://railsbook.tw/">railsbook</a><br>
<a href="http://goshdarnblocksyntax.com/">goshdarnblocksyntax</a></p>
<hr>
<ul>
<li>持续更新。</li>
<li>若有更好的资料，感谢交流。</li>
<li>若有错误的内容，感谢斧正。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 2]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-2/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-2/">
        </link>
        <updated>2020-02-03T09:17:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="两者对比">两者对比</h2>
<table>
<thead>
<tr>
<th>Objc</th>
<th>Ruby</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSNumber</td>
<td>Number</td>
</tr>
<tr>
<td>NSMutableString</td>
<td>String</td>
</tr>
<tr>
<td>NSRange</td>
<td>Range</td>
</tr>
<tr>
<td>NSMutableArray</td>
<td>Array</td>
</tr>
<tr>
<td>NSMutableDictionary</td>
<td>Hash</td>
</tr>
<tr>
<td>NSString + SEL</td>
<td>Symbol</td>
</tr>
</tbody>
</table>
<h2 id="数字">数字</h2>
<h3 id="四则运算">四则运算</h3>
<p>objc:</p>
<pre><code class="language-objc">NSLog(@&quot;=&gt; %@&quot;, @( (10 + 3) ) );       // =&gt; 13
NSLog(@&quot;=&gt; %@&quot;, @( (10 - 3) ) );       // =&gt; 7
NSLog(@&quot;=&gt; %@&quot;, @( (10 * 3) ) );       // =&gt; 30
NSLog(@&quot;=&gt; %@&quot;, @( (10 / 3) ) );       // =&gt; 3
NSLog(@&quot;=&gt; %@&quot;, @( (10 / 3.0) ) );     // =&gt; 3.333333333333333
NSLog(@&quot;=&gt; %@&quot;, @( (10.0 / 3.0) ) );   // =&gt; 3.333333333333333
NSLog(@&quot;=&gt; %@&quot;, @( (10.0/3.0) ) );     // =&gt; 3.333333333333333
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">puts 10 + 3    # =&gt; 13
puts 10 - 3    # =&gt; 7
puts 10 * 3    # =&gt; 30
puts 10 / 3    # =&gt; 3
puts 10.0 / 3  # =&gt; 3.3333333333333335
puts 10 / 3.0  # =&gt; 3.3333333333333335
puts 10 % 3    # =&gt; 1
</code></pre>
<h3 id="查看对象类型">查看对象类型</h3>
<p>objc:</p>
<pre><code class="language-objc">NSLog(@&quot;%@&quot;, NSStringFromClass( @(5).class ) );  // =&gt; __NSCFNumber
</code></pre>
<p>ruby:</p>
<pre><code>puts 5.class  # =&gt; Integer
</code></pre>
<h3 id="浮点运算的不准确性">浮点运算的不准确性</h3>
<p>objc:</p>
<pre><code class="language-objc">printf(&quot;%f\n&quot;, (3.51212 + 1)); // =&gt; 4.512120
printf(&quot;%d\n&quot;, ( 4.51212 == (3.51212 + 1) ));  // =&gt; 0

// NSDecimalNumber
NSDecimalNumber * d0 = [NSDecimalNumber decimalNumberWithString:@&quot;4.51212&quot;];
NSDecimalNumber * d1 = [NSDecimalNumber decimalNumberWithString:@&quot;3.51212&quot;];
NSDecimalNumber * d2 = [NSDecimalNumber decimalNumberWithString:@&quot;1&quot;];
NSDecimalNumber * d3 =  [d1 decimalNumberByAdding:d2];
printf(&quot;%d\n&quot;, ( d0.doubleValue == d3.doubleValue ));  // =&gt; 1
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">puts (3.51212 + 1)   # =&gt; 4.5121199999999995
puts 4.51212 == (3.51212 + 1)  # =&gt; false

# bigdecimal
require 'bigdecimal'
puts BigDecimal(&quot;4.51212&quot;) == BigDecimal(&quot;3.51212&quot;) + BigDecimal(&quot;1&quot;)    # =&gt; true
</code></pre>
<h3 id="问题如何判断数字的奇偶数">问题：如何判断数字的奇偶数</h3>
<p>objc:</p>
<pre><code class="language-objc">int n=10;
if(n!=0 &amp;&amp; n%2==0){
	NSLog(@&quot;该数是偶数&quot;);
}else if(n%2==1){
	NSLog(@&quot;该数是奇数&quot;);
}else{
	NSLog(@&quot;该数是0&quot;);
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">num = 10

if num % 2 == 0
	puts &quot;偶数&quot;
else
	puts &quot;奇数&quot;
end

puts 10.odd?    # =&gt; false
puts 10.even?   # =&gt; true
</code></pre>
<h3 id="问题数字如何四舍五入保留两位小数">问题：数字如何四舍五入保留两位小数</h3>
<p>objc:</p>
<pre><code class="language-objc">printf(&quot;%.2f\n&quot;,3.333); // =&gt; 3.333
printf(&quot;%.2f\n&quot;,4.518); // =&gt; 4.518
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">puts 3.333.round(2)   # =&gt; 3.33
puts 4.518.round(2)   # =&gt; 4.52
</code></pre>
<h2 id="字符串">字符串</h2>
<h3 id="使用方法">使用方法</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableString * name = @&quot;编程&quot;.mutableCopy;
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">name = &quot;编程&quot;
</code></pre>
<h3 id="字符串修改">字符串修改</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableString * name = @&quot;小明&quot;.mutableCopy;
NSNumber * age = @(18);

NSMutableString * tmpStr = @&quot;你好，我是&quot;.mutableCopy;
[tmpStr appendString:name];
[tmpStr appendString:@&quot;，我今年&quot;];
[tmpStr appendString:age.stringValue];
[tmpStr appendString:@&quot;岁&quot;];
NSLog(@&quot;%@&quot;, tmpStr); // 你好，我是小明，我今年18岁

NSLog(@&quot;你好，我是%@，我今年%@岁&quot;, name, age); // 你好，我是小明，我今年18岁
</code></pre>
<h3 id="字符串-数组">字符串 =&gt; 数组</h3>
<p>ruby:</p>
<pre><code class="language-ruby">name = &quot;小明&quot;
age = 18

puts &quot;你好，我是&quot; + name + &quot;，我今年&quot; + age.to_s + &quot;岁&quot; # =&gt; 你好，我是小明，我今年18岁

puts &quot;你好，我是#{name}，我今年#{age}岁&quot; # =&gt; 你好，我是小明，我今年18岁
</code></pre>
<h3 id="引号中的引号">引号中的引号</h3>
<p>objc:</p>
<pre><code class="language-objc">NSLog(@&quot;\&quot;小明\&quot;&quot;); // &quot;小明&quot;
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">puts &quot;\&quot;小明\&quot;&quot;
puts %q(&quot;小明&quot;) 
puts %Q(&quot;小明&quot;)
</code></pre>
<h2 id="范围">范围</h2>
<p>objc:</p>
<pre><code class="language-objc">NSRange range = NSMakeRange(0, 10);
NSLog(@&quot;位置:%ld  长度:%ld&quot;, range.location, range.length); // # =&gt; 位置:0  长度:10
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">(1..5).to_a   # 1 到 5
(1...5).to_a  # 1 到 4

('a'..'z').to_a
('A'..'Z').to_a

</code></pre>
<ul>
<li>OC的NSRange是结构体，ruby的Range的对象</li>
<li>NSRange常用于字符串截取</li>
<li>Range可转为Array</li>
</ul>
<h2 id="数组">数组</h2>
<h3 id="数组初始化">数组初始化</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableArray * thoughts = @[@&quot;甲&quot;, @&quot;乙&quot;, @&quot;丙&quot;, @&quot;丁&quot;].mutableCopy;
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">thoughts = [&quot;甲&quot;, &quot;乙&quot;, &quot;丙&quot;, &quot;丁&quot;]
</code></pre>
<h3 id="数组取值">数组取值</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableArray * thought = @[@&quot;甲&quot;, @&quot;乙&quot;, @&quot;丙&quot;, @&quot;丁&quot;].mutableCopy;
NSLog(@&quot;%@&quot;, thought[1]); // 乙
NSLog(@&quot;%@&quot;, thought.firstObject); // 甲
NSLog(@&quot;%@&quot;, thought.lastObject); // 丁	
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">thoughts = [&quot;甲&quot;, &quot;乙&quot;, &quot;丙&quot;, &quot;丁&quot;]
p thoughts[1] # =&gt; 乙
p thoughts[-1] # =&gt; 丁
p thoughts.first # =&gt; 甲
p thoughts.last # =&gt; 丁
</code></pre>
<ul>
<li><code>ruby</code>索引值可为负数，代表方向取值</li>
</ul>
<h3 id="问题把数组-1-2-3-4-5-变成-1-3-5-7-9">问题：把数组 [1, 2, 3, 4, 5] 变成 [1, 3, 5, 7, 9]</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableArray * arr = @[@(1), @(2), @(3), @(4), @(5)].mutableCopy;
NSMutableArray * arr2 = @[].mutableCopy;
[arr enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
	NSNumber * num = obj;
	NSInteger i = num.integerValue;
	[arr2 addObject:@( (i * 2 - 1) )];
}];
NSLog(@&quot;%@&quot;, arr2);//  =&gt;  (1, 3, 5, 7, 9)
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">list = [1, 2, 3, 4, 5]
list.map { 
	|i| i * 2 - 1 
}
p list # [1, 3, 5, 7, 9]
</code></pre>
<h2 id="哈希">哈希</h2>
<h3 id="hash的生成和取值"><code>hash</code>的生成和取值</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableDictionary * thoughtDict = @{
							    @&quot;a&quot;: @&quot;甲&quot;,
							    @&quot;b&quot;: @&quot;乙&quot;,
							    @&quot;c&quot;: @&quot;丙&quot;
							   }.mutableCopy;
NSLog(@&quot;%@&quot;,thoughtDict[@&quot;b&quot;]); // =&gt; 乙
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">thought_hash = {
	a: &quot;甲&quot;,
	b: &quot;乙&quot;,
	c: &quot;丙&quot;
}

puts th_hash[:b] # =&gt; 乙
</code></pre>
<h3 id="hash的所有键和所有值"><code>hash</code>的所有键和所有值</h3>
<p>objc:</p>
<pre><code class="language-objc">NSMutableDictionary * thoughtDict = @{
							   @&quot;a&quot;: @&quot;甲&quot;,
							   @&quot;b&quot;: @&quot;乙&quot;,
							   @&quot;c&quot;: @&quot;丙&quot;
							   }.mutableCopy;
NSLog(@&quot;%@&quot;,thoughtDict.allKeys);
/*
*/

NSLog(@&quot;%@&quot;,thoughtDict.allValues);
/*
*/

[thoughtDict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {
	NSLog(@&quot;%@&quot;, key);
	NSLog(@&quot;%@&quot;, obj);
}];
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">thought_hash = {
	a: &quot;甲&quot;,
	b: &quot;乙&quot;,
	c: &quot;丙&quot;
}

puts thought_hash.keys  # =&gt; []
puts thought_hash.values # =&gt; []

profile.each do |key, value|
  puts key
  puts value
end
</code></pre>
<h2 id="符号">符号</h2>
<h3 id="定义">定义</h3>
<p>objc:</p>
<pre><code class="language-objc">NSString * hello = @&quot;hello&quot;;
</code></pre>
<p>ruby:</p>
<pre><code>:hello
</code></pre>
<ul>
<li><code>Symbol</code> 是不可变的对象</li>
<li><code>Symbol</code> 是带变量名的对象</li>
</ul>
<hr>
<p>参考资料：<br>
<a href="https://railsbook.tw/">railsbook</a></p>
<hr>
<ul>
<li>持续更新。</li>
<li>若有更好的资料，感谢交流。</li>
<li>若有错误的内容，感谢斧正。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Objc and Ruby relationships 1]]></title>
        <id>https://flyweights.github.io/post/objc-and-ruby-relationships-1/</id>
        <link href="https://flyweights.github.io/post/objc-and-ruby-relationships-1/">
        </link>
        <updated>2020-02-02T09:07:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="流程控制">流程控制</h2>
<h3 id="判断">判断</h3>
<h4 id="ifelsifelse"><code>if···elsif···else···</code></h4>
<p>objc:</p>
<pre><code class="language-objc">NSInteger day = 5;

if (day==0) {
	NSLog(@&quot;星期日&quot;);
}else if (day==6){
	NSLog(@&quot;星期六&quot;);
}else {
	NSLog(@&quot;工作日&quot;);
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">day = 5

if day==0
	puts &quot;星期日&quot;
elsif day==6
	puts &quot;星期六&quot;
else
	puts &quot;工作日&quot;
end
</code></pre>
<h4 id="三目运算符">三目运算符</h4>
<p>objc:</p>
<pre><code class="language-objc">NSInteger day = 5;
NSString * result = (day==6 || day==0) ? @&quot;休息日&quot; : @&quot;工作日&quot;;
NSLog(@&quot;%@&quot;, result);
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">day = 5;
result = (day==6 || day==0) ? &quot;休息日&quot; : &quot;工作日&quot;;
puts result
</code></pre>
<h4 id="case-when"><code>case ... when ...</code></h4>
<p>objc</p>
<pre><code class="language-objc">NSInteger day=5;

switch (day) {
	case 1:
		NSLog(@&quot;工作日-星期一&quot;);
		break;
	
	case 2:
		NSLog(@&quot;工作日-星期二&quot;);
		break;
	
	case 3:
		NSLog(@&quot;工作日-星期三&quot;);
		break;
		
	case 4:
		NSLog(@&quot;工作日-星期四&quot;);
		break;
	
	case 5:
		NSLog(@&quot;工作日-星期五&quot;);
		break;
	
	case 6:
		NSLog(@&quot;休息日-星期六&quot;);
		break;
	
	case 0:
		NSLog(@&quot;休息日-星期日&quot;);
		break;
		
	default:
        NSLog(@&quot;未知&quot;);
	}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">day = 5

case day
when 1..5
	puts &quot;工作日&quot;
when 0
	puts &quot;星期日&quot;
when 6
	puts &quot;星期六&quot;
else
	puts &quot;未知&quot;
end
</code></pre>
<h3 id="循环">循环</h3>
<h4 id="while"><code>while</code></h4>
<p>objc:</p>
<pre><code class="language-objc">NSInteger counter = 0;

while (counter &lt; 5) {
	NSLog(@&quot;hi, %ld&quot;, counter);
	counter += 1;
}
</code></pre>
<h5 id="ruby">ruby:</h5>
<pre><code class="language-ruby">counter = 0

while counter &lt; 5
  puts &quot;hi, #{counter}&quot;
  counter += 1
end
</code></pre>
<h4 id="for-in"><code>for in</code></h4>
<p>objc:</p>
<pre><code class="language-objc">NSMutableArray * thoughts =  @[@&quot;儒家&quot;, @&quot;道家&quot;, @&quot;墨家&quot;, @&quot;法家&quot;].mutableCopy;
for (NSString * thought in thoughts) {
	NSLog(@&quot;%@&quot;, thought);
}
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">thoughts = [&quot;儒家&quot;, &quot;道家&quot;, &quot;墨家&quot;, &quot;法家&quot;]
for thought in thoughts
	puts thought
end
</code></pre>
<h4 id="upto-downto"><code>upto &amp; downto</code></h4>
<p>objc:</p>
<pre><code class="language-objc">for (NSInteger i = 1; i &lt;= 5 ; i++) {
	NSLog(@&quot;hi, %ld&quot;, i);
}
/*
hi, 1
hi, 2
hi, 3
hi, 4
hi, 5
*/


for (NSInteger i = 5; i &gt;= 1 ; i--) {
	NSLog(@&quot;hi, %ld&quot;, i);
}
/*
hi, 5
hi, 4
hi, 3
hi, 2
hi, 1
*/
</code></pre>
<p>ruby:</p>
<pre><code class="language-ruby">1.upto(5) do |i|
  puts &quot;hi, #{i}&quot;
end

=begin
hi, 1
hi, 2
hi, 3
hi, 4
hi, 5
=end


5.downto(1) do |i|
  puts &quot;hi, #{i}&quot;
end

=begin
hi, 5
hi, 4
hi, 3
hi, 2
hi, 1
=end
</code></pre>
<h4 id="iteration"><code>iteration</code></h4>
<p>objc:</p>
<pre><code class="language-objc">NSMutableArray * thoughts =  @[@&quot;甲&quot;, @&quot;乙&quot;, @&quot;丙&quot;, @&quot;丁&quot;].mutableCopy;
[thoughts enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
	NSString * thought = obj;
	NSLog(@&quot;%@&quot;, thought);
}];
</code></pre>
<h5 id="ruby-2">ruby:</h5>
<pre><code>thoughts = [&quot;甲&quot;, &quot;乙&quot;, &quot;丙&quot;, &quot;丁&quot;]
thoughts.each do |thought|
	puts thought
end
</code></pre>
<hr>
<p>参考资料：<br>
<a href="https://railsbook.tw/">railsbook</a></p>
<hr>
<ul>
<li>持续更新。</li>
<li>若有更好的资料，感谢交流。</li>
<li>若有错误的内容，感谢斧正。</li>
</ul>
]]></content>
    </entry>
</feed>