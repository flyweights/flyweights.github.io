<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flyway.xyz</id>
    <title>白罴</title>
    <updated>2020-09-05T11:10:55.547Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flyway.xyz"/>
    <link rel="self" href="https://flyway.xyz/atom.xml"/>
    <subtitle>闲坐竹林里，淡泊寻常心。</subtitle>
    <logo>https://flyway.xyz/images/avatar.png</logo>
    <icon>https://flyway.xyz/favicon.ico</icon>
    <rights>All rights reserved 2020, 白罴</rights>
    <entry>
        <title type="html"><![CDATA[算法]]></title>
        <id>https://flyway.xyz/post/suan-fa/</id>
        <link href="https://flyway.xyz/post/suan-fa/">
        </link>
        <updated>2020-09-05T11:04:09.000Z</updated>
        <content type="html"><![CDATA[<p>给定一个升序整型数组 [0,1,2,4,5,7,13,15,16] ,<br>
找出其中连续出现的数字区间，<br>
输出为[&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;,&quot;13&quot;,&quot;15-&gt;16&quot;]</p>
<pre><code class="language-js">let arr = [
	0, 1, 2, 4, 5, 7,
	13, 15, 16
]
let newArr = []

// 执行函数
function bar (index = 0) {
	// 终点
	if (index &gt; arr.length - 1) {
		return;
	}
	
	// 起点
	let tmps = []
	tmps.push(arr[index])
	foo(tmps, index)
}

// 递归函数
function foo (tmps, index) {
	if (arr[index] + 1 == arr[index + 1]) {
		tmps.push(arr[index + 1])
		foo(tmps, index + 1)
	} else {
		newArr.push(tmps) // 插值
		bar(index + 1)  // 下一轮
	}
}

bar()
console.log(newArr)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[funtion-callback-promise]]></title>
        <id>https://flyway.xyz/post/funtion-callback-promise/</id>
        <link href="https://flyway.xyz/post/funtion-callback-promise/">
        </link>
        <updated>2020-07-04T14:59:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="目录结构">目录结构</h3>
<pre><code>.
├── files
│   ├── a.json
│   ├── b.json
│   └── c.json
├── funtion.js
├── callback.js
└── promise.js
</code></pre>
<h3 id="function">function</h3>
<pre><code class="language-js">const fs = require('fs');
const path = require('path');

const filename = 'a.json'
const fileUrl = path.resolve(__dirname, 'files', filename)
fs.readFile(fileUrl, 'utf8', (err, data) =&gt; {
  if (err) {
    console.log(err);
    return
  }

  console.log(data.toString());
})
</code></pre>
<h3 id="callback">callback</h3>
<pre><code class="language-js">const fs = require('fs');
const path = require('path');

function getFileContent (filename, callback) {
  const fileUrl = path.resolve(__dirname, 'files', filename)
  fs.readFile(fileUrl, 'utf8', (err, data) =&gt; {
    callback(
      err,
      JSON.parse(data.toString())
    )
  })
}

const filename = 'a.json'
getFileContent(filename, (err, data) =&gt; {
  console.log(data.message);
  getFileContent(data.next, (err, data) =&gt; {
    console.log(data.message);
    getFileContent(data.next, (err, data) =&gt; {
      console.log(data.message);
    })
  })
})
</code></pre>
<h3 id="promise">promise</h3>
<pre><code class="language-js">const fs = require('fs');
const path = require('path');

function getFileContent (filename) {
  const promise = new Promise((resolve, reject) =&gt; {
    const fileUrl = path.resolve(__dirname, 'files', filename)
    fs.readFile(fileUrl, 'utf8', (err, data) =&gt; {
      if (err) {
        reject(err)
        return
      }
      resolve(
        JSON.parse(data.toString())
      )
    })
  })
  return promise
}

const filename = 'a.json'
getFileContent(filename).then((data) =&gt; {
  console.log(data);
  return getFileContent (data.next)
}).then((data) =&gt; {
  console.log(data);
  return getFileContent(data.next)
}).then((data) =&gt; {
  console.log(data);
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node-blog-route]]></title>
        <id>https://flyway.xyz/post/node-blog-route/</id>
        <link href="https://flyway.xyz/post/node-blog-route/">
        </link>
        <updated>2020-07-03T14:44:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="添加路由">添加路由</h3>
<pre><code class="language-js">// src/router/blog.js

const handleBlogRouter = (req, res) =&gt; {
  const method = req.method
  const path = req.path

  if (method === 'GET' &amp;&amp; path === '/api/blog/list') {
    return {
      msg: 'GET Blog List'
    }
  }

  if (method === 'GET' &amp;&amp; path === '/api/blog/detail') {
    return {
      msg: 'GET Blog Detail'
    }
  }

  if (method === 'POST' &amp;&amp; path === '/api/blog/new') {
    return {
      msg: 'POST Blog New'
    }
  }

  if (method === 'POST' &amp;&amp; path === '/api/blog/update') {
    return {
      msg: 'POST Blog update'
    }
  }

  if (method === 'POST' &amp;&amp; path === '/api/blog/del') {
    return {
      msg: 'POST Blog delete'
    }
  }
}

module.exports = handleBlogRouter

</code></pre>
<pre><code class="language-js">// src/router/user.js

const handleUserRouter = (req, res) =&gt; {
  const method = req.method
  const path = req.path

  if (method === 'POST' &amp;&amp; path === '/api/user/login') {
    return {
      msg: 'POST User login'
    }
  }

}

module.exports = handleUserRouter
</code></pre>
<h3 id="修改入口文件">修改入口文件</h3>
<pre><code class="language-js">// app.js

const querystring = require('querystring');

const handleBlogRouter = require('./src/router/blog')
const handleUserRouter = require('./src/router/user')

const serverHandle = (req, res) =&gt; {
  res.setHeader('Content-Type','application/json')

  const url = req.url
  req.path = url.split('?')[0]
  req.query = querystring.parse(url.split('?')[1])

  const blogData = handleBlogRouter(req, res)
  if (blogData) {
    res.end(
      JSON.stringify(blogData)
    )
    return
  }

  const userData = handleUserRouter(req, res)
  if (userData) {
    res.end(
      JSON.stringify(userData)
    )
    return
  }

  // 404
  res.writeHead(404, { 'Content-Type': 'text/plain' })
  res.write('404 Not Found')
  res.end()
}

module.exports = serverHandle

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node-blog-init]]></title>
        <id>https://flyway.xyz/post/node-blog-init/</id>
        <link href="https://flyway.xyz/post/node-blog-init/">
        </link>
        <updated>2020-07-02T02:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="目录机构">目录机构</h3>
<pre><code class="language-bash">$ mkdir blog1 &amp;&amp; cd blog1
$ mkdir bin &amp;&amp; touch ./bin/www.js
$ touch app.js
$ npm init -y
</code></pre>
<pre><code>.
├── app.js
├── bin
│   └── www.js
└── package.json
</code></pre>
<h3 id="安装依赖">安装依赖</h3>
<pre><code class="language-bash">$ npm install cross-env --save-dev
$ npm install nodemon --save-dev
</code></pre>
<h3 id="修改packagejson">修改<code>package.json</code></h3>
<pre><code class="language-json">{
  &quot;name&quot;: &quot;blog1&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;bin/www.js&quot;,
  &quot;bin&quot;: {
    &quot;blog1&quot;: &quot;www.js&quot;
  },
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,
    &quot;dev&quot;: &quot;cross-env NODE_ENV=dev nodemon ./bin/www.js&quot;,
    &quot;prd&quot;: &quot;cross-env NODE_ENV=production nodemon ./bin/www.js&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;devDependencies&quot;: {
    &quot;cross-env&quot;: &quot;^7.0.2&quot;,
    &quot;nodemon&quot;: &quot;^2.0.4&quot;
  }
}
</code></pre>
<pre><code class="language-js">// app.js

const serverHandle = (req, res) =&gt; {
  res.setHeader('Content-Type','application/json')

  const resData = {
    name: 'xiaokang',
    env: process.env.NODE_ENV
  }

  res.end(
    JSON.stringify(resData)
  )
}

module.exports = serverHandle

</code></pre>
<pre><code class="language-js">// www.js

const http = require('http');

const PORT = 8000
const serverHandle = require('../app');

const server = http.createServer(serverHandle)
server.listen(PORT)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[node-http]]></title>
        <id>https://flyway.xyz/post/node-http/</id>
        <link href="https://flyway.xyz/post/node-http/">
        </link>
        <updated>2020-07-01T00:51:19.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">const http = require('http');
const querystring = require('querystring');

const server = http.createServer((req, res) =&gt; {
  const method = req.method
  const url = req.url
  const path = url.split('?')[0]
  const query = querystring.parse(url.split('?')[1])

  res.setHeader('Content-Type', 'application/json')

  const resData = {
    method,
    url,
    path,
    query,
  }

  if (method === 'GET') {
    res.end(
      JSON.stringify(resData)
    )
  }

  if (method === 'POST') {
    let postData = ''
    req.on('data', (chunk) =&gt; {
      postData += chunk.toString()
    })
    req.on('end', () =&gt; {
      resData.postData = postData
      res.end(
        JSON.stringify(resData)
      )
    })
  }
})

server.listen(8000)
console.log('OK');
</code></pre>
]]></content>
    </entry>
</feed>